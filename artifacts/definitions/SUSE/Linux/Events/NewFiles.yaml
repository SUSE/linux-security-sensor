name: SUSE.Linux.Events.NewFiles
description: |
  This artifact collects Every new file in monitored
  directory from the Linux kernel.

precondition: SELECT OS From info() where OS = 'linux'

type: CLIENT_EVENT

required_permissions:
  - EXECVE

sources:
  - query: |

     LET new_file_rules = ("-w /etc/init.d -p wa -k vrr_etc_update", "-w /etc/rc.local -p wa -k vrr_etc_update", "-w /etc/modules -p wa -k vrr_etc_update", "-w /etc/cron.allow -p wa -k vrr_etc_update", "-w /etc/cron.deny -p wa -k vrr_etc_update", "-w /etc/cron.d/ -p wa -k vrr_etc_update", "-w /etc/cron.daily/ -p wa -k vrr_etc_update", "-w /etc/cron.hourly/ -p wa -k vrr_etc_update", "-w /etc/cron.monthly/ -p wa -k vrr_etc_update", "-w /etc/cron.weekly/ -p wa -k vrr_etc_update", "-w /etc/crontab -p wa -k vrr_etc_update", "-w /var/spool/cron -p wa -k vrr_etc_update")

     LET new_file_log = SELECT timestamp(string=Timestamp) AS Time, Sequence,
           atoi(string=Summary.Actor.Primary) AS UserId,
           Result AS State,
           File.path AS FileName,
           { SELECT * FROM if(condition=dirname(path=File.path)=~'^.+',then=File.path,else=join(array=[Process.CWD, File.path], sep='/')) } AS FilePath
       FROM audit(rules=new_file_rules)
       WHERE "vrr_etc_update" in Tags AND Result = 'success' AND File != null AND Type != 'config_change'

     // Cache Uid -> Username mapping.
     LET usrs <= SELECT User, atoi(string=Uid) AS Uid
       FROM Artifact.Linux.Sys.Users()

     LET hash_log = SELECT Time, UserId,
           { SELECT User from usrs WHERE Uid = UserId} AS User,
           State, FileName, FilePath,
           hash(path=FilePath, hashselect=['SHA1', 'SHA256']) AS Hash
       FROM new_file_log

     // Enrich the original artifact with more data.
     SELECT Time, UserId, User,
            State, FileName, FilePath, 
            Hash.SHA256 AS Hash_SHA256, Hash.SHA1 AS Hash_SHA1
     FROM hash_log
